generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://dev:dev@localhost:5432/kitab"
}

model admin {
  id       Int    @id @unique @default(autoincrement())
  username String @unique
  email    String @unique
  password String
}

model user {
  id       Int       @id @unique @default(autoincrement())
  username String    @unique
  email    String    @unique
  password String
  country  String
  gender   String
  reviews  review[]
  library  library[]
}

model library {
  id     Int     @id @unique @default(autoincrement())
  name   String?
  books  book[]
  user   user?   @relation(fields: [userId], references: [id])
  userId Int?
}

model author {
  name        String @id @unique
  slug        String @unique
  image       String
  country     String
  description String
  books       book[]
}

model publisher {
  id       Int    @id @unique @default(autoincrement())
  name     String @unique
  location String
  books    book[]
}

model book {
  id           Int        @id @unique @default(autoincrement())
  name         String     @unique
  slug         String     @unique
  cover        String
  language     String
  downloads    Int
  pages        Int
  type         String
  size         String
  rate         Float
  price        String
  description  String
  author       author     @relation(fields: [authorName], references: [name])
  publisher    publisher? @relation(fields: [publisherId], references: [id])
  category     category   @relation(fields: [categoryName], references: [name])
  categoryName String
  authorName   String
  publisherId  Int?
  reviews      review[]
  sections     section[]
  library      library[]
}

model section {
  id    Int    @id @unique @default(autoincrement())
  name  String @unique
  books book[]
}

model category {
  // id    Int    @unique @default(autoincrement())
  name  String @id @unique
  books book[]
}

model review {
  id      Int      @id @unique @default(autoincrement())
  date    DateTime @default(now())
  comment String
  user    user     @relation(fields: [userId], references: [id])
  book    book     @relation(fields: [bookId], references: [id])
  userId  Int
  bookId  Int
}
